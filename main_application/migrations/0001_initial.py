# Generated by Django 5.2.4 on 2025-10-28 22:04

import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.gis.db.models.fields
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AdvertisingCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('code', models.CharField(max_length=20, unique=True)),
                ('description', models.TextField()),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name_plural': 'advertising categories',
                'db_table': 'advertising_categories',
            },
        ),
        migrations.CreateModel(
            name='AssetCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('code', models.CharField(max_length=50, unique=True)),
                ('description', models.TextField()),
                ('depreciation_rate', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('useful_life_years', models.IntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name_plural': 'asset categories',
                'db_table': 'asset_categories',
            },
        ),
        migrations.CreateModel(
            name='CaseCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('code', models.CharField(max_length=50, unique=True)),
                ('description', models.TextField()),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name_plural': 'case categories',
                'db_table': 'case_categories',
            },
        ),
        migrations.CreateModel(
            name='ChargeRate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('rate_type', models.CharField(max_length=50)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=15)),
                ('min_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('max_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('effective_from', models.DateField()),
                ('effective_to', models.DateField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'charge_rates',
            },
        ),
        migrations.CreateModel(
            name='County',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('code', models.CharField(max_length=10, unique=True)),
                ('county_number', models.IntegerField(unique=True)),
                ('headquarters', models.CharField(max_length=100)),
                ('area_sq_km', models.DecimalField(decimal_places=2, max_digits=10)),
                ('boundary', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, null=True, srid=4326)),
                ('logo', models.ImageField(blank=True, null=True, upload_to='county/logos/')),
            ],
            options={
                'verbose_name_plural': 'counties',
                'db_table': 'counties',
            },
        ),
        migrations.CreateModel(
            name='DocumentCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('code', models.CharField(max_length=50, unique=True)),
                ('description', models.TextField()),
                ('retention_period_years', models.IntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name_plural': 'document categories',
                'db_table': 'document_categories',
            },
        ),
        migrations.CreateModel(
            name='FacilityCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('code', models.CharField(max_length=20, unique=True)),
                ('description', models.TextField()),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name_plural': 'facility categories',
                'db_table': 'facility_categories',
            },
        ),
        migrations.CreateModel(
            name='FineCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('code', models.CharField(max_length=50, unique=True)),
                ('description', models.TextField()),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name_plural': 'fine categories',
                'db_table': 'fine_categories',
            },
        ),
        migrations.CreateModel(
            name='FuelStation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('code', models.CharField(max_length=50, unique=True)),
                ('location', django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ('address', models.TextField()),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'fuel_stations',
            },
        ),
        migrations.CreateModel(
            name='HealthFacility',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('code', models.CharField(max_length=50, unique=True)),
                ('facility_level', models.CharField(choices=[('level_1', 'Community Health Unit'), ('level_2', 'Dispensary'), ('level_3', 'Health Centre'), ('level_4', 'Sub-County Hospital'), ('level_5', 'County Referral Hospital')], max_length=20)),
                ('location', django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ('phone', models.CharField(max_length=15)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('bed_capacity', models.IntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name_plural': 'health facilities',
                'db_table': 'health_facilities',
            },
        ),
        migrations.CreateModel(
            name='InventoryItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item_code', models.CharField(max_length=50, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('item_type', models.CharField(choices=[('consumable', 'Consumable'), ('non_consumable', 'Non-Consumable')], max_length=20)),
                ('unit_of_measure', models.CharField(max_length=50)),
                ('reorder_level', models.IntegerField(default=0)),
                ('unit_cost', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'inventory_items',
            },
        ),
        migrations.CreateModel(
            name='LandUseType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('code', models.CharField(max_length=20, unique=True)),
                ('description', models.TextField()),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'land_use_types',
            },
        ),
        migrations.CreateModel(
            name='LeaveType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('code', models.CharField(max_length=20, unique=True)),
                ('description', models.TextField()),
                ('days_per_year', models.IntegerField()),
                ('requires_approval', models.BooleanField(default=True)),
                ('is_paid', models.BooleanField(default=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'leave_types',
            },
        ),
        migrations.CreateModel(
            name='LicenseRequirement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('requirement_name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('is_mandatory', models.BooleanField(default=True)),
                ('display_order', models.IntegerField(default=0)),
            ],
            options={
                'db_table': 'license_requirements',
                'ordering': ['display_order'],
            },
        ),
        migrations.CreateModel(
            name='PaymentMethod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('code', models.CharField(max_length=20, unique=True)),
                ('provider', models.CharField(max_length=100)),
                ('is_online', models.BooleanField(default=True)),
                ('is_active', models.BooleanField(default=True)),
                ('api_endpoint', models.URLField(blank=True)),
                ('configuration', models.JSONField(default=dict)),
            ],
            options={
                'db_table': 'payment_methods',
            },
        ),
        migrations.CreateModel(
            name='Permission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('codename', models.CharField(max_length=100, unique=True)),
                ('module', models.CharField(max_length=100)),
                ('description', models.TextField()),
            ],
            options={
                'db_table': 'permissions',
            },
        ),
        migrations.CreateModel(
            name='PropertyType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('code', models.CharField(max_length=20, unique=True)),
                ('description', models.TextField()),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'property_types',
            },
        ),
        migrations.CreateModel(
            name='TrainingProgram',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('program_name', models.CharField(max_length=200)),
                ('program_code', models.CharField(max_length=50, unique=True)),
                ('description', models.TextField()),
                ('provider', models.CharField(max_length=200)),
                ('duration_days', models.IntegerField()),
                ('cost_per_participant', models.DecimalField(decimal_places=2, max_digits=10)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('venue', models.CharField(max_length=200)),
                ('max_participants', models.IntegerField()),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'training_programs',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('employee_number', models.CharField(blank=True, max_length=50, null=True, unique=True)),
                ('phone_number', models.CharField(max_length=15, unique=True)),
                ('id_number', models.CharField(blank=True, max_length=20, null=True, unique=True)),
                ('is_active_staff', models.BooleanField(default=True)),
                ('biometric_id', models.CharField(blank=True, max_length=100, null=True, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Asset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('asset_number', models.CharField(max_length=50, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('asset_type', models.CharField(choices=[('movable', 'Movable'), ('immovable', 'Immovable')], max_length=20)),
                ('acquisition_date', models.DateField()),
                ('acquisition_cost', models.DecimalField(decimal_places=2, max_digits=15)),
                ('current_value', models.DecimalField(decimal_places=2, max_digits=15)),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326)),
                ('serial_number', models.CharField(blank=True, max_length=100)),
                ('barcode', models.CharField(blank=True, max_length=100, unique=True)),
                ('warranty_expiry', models.DateField(blank=True, null=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('disposed', 'Disposed'), ('written_off', 'Written Off')], default='active', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('custodian', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='custodian_assets', to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assets', to='main_application.assetcategory')),
            ],
            options={
                'db_table': 'assets',
            },
        ),
        migrations.CreateModel(
            name='AssetDisposal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('disposal_number', models.CharField(max_length=50, unique=True)),
                ('disposal_date', models.DateField()),
                ('disposal_method', models.CharField(choices=[('sale', 'Sale'), ('auction', 'Auction'), ('donation', 'Donation'), ('write_off', 'Write Off'), ('destruction', 'Destruction')], max_length=20)),
                ('disposal_value', models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                ('reason', models.TextField()),
                ('buyer_details', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('approved_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('asset', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='disposal', to='main_application.asset')),
            ],
            options={
                'db_table': 'asset_disposals',
            },
        ),
        migrations.CreateModel(
            name='AssetMaintenance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('maintenance_date', models.DateField()),
                ('maintenance_type', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('cost', models.DecimalField(decimal_places=2, max_digits=10)),
                ('service_provider', models.CharField(blank=True, max_length=200)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('asset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='maintenance_records', to='main_application.asset')),
                ('performed_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'asset_maintenance',
            },
        ),
        migrations.CreateModel(
            name='BankReconciliation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reconciliation_date', models.DateField()),
                ('bank_account', models.CharField(max_length=100)),
                ('opening_balance', models.DecimalField(decimal_places=2, max_digits=15)),
                ('closing_balance', models.DecimalField(decimal_places=2, max_digits=15)),
                ('total_receipts', models.DecimalField(decimal_places=2, max_digits=15)),
                ('total_payments', models.DecimalField(decimal_places=2, max_digits=15)),
                ('variance', models.DecimalField(decimal_places=2, max_digits=15)),
                ('is_reconciled', models.BooleanField(default=False)),
                ('reconciled_at', models.DateTimeField(blank=True, null=True)),
                ('notes', models.TextField(blank=True)),
                ('reconciled_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'bank_reconciliations',
            },
        ),
        migrations.CreateModel(
            name='Bill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bill_number', models.CharField(max_length=50, unique=True)),
                ('bill_date', models.DateField()),
                ('due_date', models.DateField()),
                ('bill_amount', models.DecimalField(decimal_places=2, max_digits=15)),
                ('penalty_amount', models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                ('total_amount', models.DecimalField(decimal_places=2, max_digits=15)),
                ('amount_paid', models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                ('balance', models.DecimalField(decimal_places=2, max_digits=15)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('issued', 'Issued'), ('partially_paid', 'Partially Paid'), ('paid', 'Paid'), ('overdue', 'Overdue'), ('cancelled', 'Cancelled'), ('waived', 'Waived')], default='draft', max_length=20)),
                ('property_id', models.IntegerField(blank=True, null=True)),
                ('license_id', models.IntegerField(blank=True, null=True)),
                ('permit_id', models.IntegerField(blank=True, null=True)),
                ('description', models.TextField(blank=True)),
                ('notes', models.TextField(blank=True)),
                ('is_recurring', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('parent_bill', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='main_application.bill')),
            ],
            options={
                'db_table': 'bills',
            },
        ),
        migrations.CreateModel(
            name='BusinessCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('code', models.CharField(max_length=50, unique=True)),
                ('description', models.TextField()),
                ('is_active', models.BooleanField(default=True)),
                ('parent_category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='main_application.businesscategory')),
            ],
            options={
                'verbose_name_plural': 'business categories',
                'db_table': 'business_categories',
            },
        ),
        migrations.CreateModel(
            name='Case',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('case_number', models.CharField(max_length=50, unique=True)),
                ('title', models.CharField(max_length=500)),
                ('description', models.TextField()),
                ('filing_date', models.DateField()),
                ('hearing_date', models.DateField(blank=True, null=True)),
                ('status', models.CharField(choices=[('open', 'Open'), ('under_review', 'Under Review'), ('pending_hearing', 'Pending Hearing'), ('resolved', 'Resolved'), ('closed', 'Closed'), ('appealed', 'Appealed')], default='open', max_length=20)),
                ('resolution', models.TextField(blank=True)),
                ('resolution_date', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('case_officer', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_cases', to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cases', to='main_application.casecategory')),
            ],
            options={
                'db_table': 'cases',
            },
        ),
        migrations.CreateModel(
            name='CaseDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document_type', models.CharField(max_length=100)),
                ('document_name', models.CharField(max_length=200)),
                ('file', models.FileField(upload_to='cases/documents/')),
                ('description', models.TextField(blank=True)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('case', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='main_application.case')),
                ('uploaded_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'case_documents',
            },
        ),
        migrations.CreateModel(
            name='CaseHearing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hearing_date', models.DateTimeField()),
                ('venue', models.CharField(max_length=200)),
                ('proceedings', models.TextField(blank=True)),
                ('decision', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('case', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hearings', to='main_application.case')),
                ('presiding_officer', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'case_hearings',
            },
        ),
        migrations.CreateModel(
            name='BillLineItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=500)),
                ('quantity', models.DecimalField(decimal_places=2, default=1, max_digits=10)),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=15)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=15)),
                ('bill', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='line_items', to='main_application.bill')),
                ('charge_rate', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main_application.chargerate')),
            ],
            options={
                'db_table': 'bill_line_items',
            },
        ),
        migrations.CreateModel(
            name='Citizen',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entity_type', models.CharField(choices=[('individual', 'Individual'), ('business', 'Business'), ('organization', 'Organization'), ('government', 'Government Entity')], max_length=20)),
                ('unique_identifier', models.CharField(max_length=100, unique=True)),
                ('first_name', models.CharField(blank=True, max_length=100)),
                ('middle_name', models.CharField(blank=True, max_length=100)),
                ('last_name', models.CharField(blank=True, max_length=100)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, max_length=10)),
                ('business_name', models.CharField(blank=True, max_length=200)),
                ('registration_number', models.CharField(blank=True, max_length=100)),
                ('email', models.EmailField(blank=True, max_length=254, null=True, unique=True)),
                ('phone_primary', models.CharField(max_length=15)),
                ('phone_secondary', models.CharField(blank=True, max_length=15)),
                ('postal_address', models.CharField(blank=True, max_length=100)),
                ('physical_address', models.TextField(blank=True)),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326)),
                ('has_portal_access', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='citizens_created', to=settings.AUTH_USER_MODEL)),
                ('portal_user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='citizen_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'citizens',
            },
        ),
        migrations.AddField(
            model_name='case',
            name='complainant',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='cases_filed', to='main_application.citizen'),
        ),
        migrations.AddField(
            model_name='case',
            name='respondent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='cases_responded', to='main_application.citizen'),
        ),
        migrations.CreateModel(
            name='Business',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('business_number', models.CharField(max_length=50, unique=True)),
                ('business_name', models.CharField(max_length=200)),
                ('trading_name', models.CharField(blank=True, max_length=200)),
                ('registration_number', models.CharField(blank=True, max_length=100)),
                ('physical_address', models.TextField()),
                ('location', django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ('plot_number', models.CharField(blank=True, max_length=50)),
                ('nature_of_business', models.TextField()),
                ('number_of_employees', models.IntegerField(default=0)),
                ('annual_turnover', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('phone', models.CharField(max_length=15)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('is_active', models.BooleanField(default=True)),
                ('registration_date', models.DateField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('business_category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_application.businesscategory')),
                ('citizen', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='businesses', to='main_application.citizen')),
            ],
            options={
                'verbose_name_plural': 'businesses',
                'db_table': 'businesses',
            },
        ),
        migrations.AddField(
            model_name='bill',
            name='citizen',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bills', to='main_application.citizen'),
        ),
        migrations.CreateModel(
            name='CitizenDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document_type', models.CharField(max_length=100)),
                ('document_number', models.CharField(blank=True, max_length=100)),
                ('file', models.FileField(upload_to='citizen/documents/')),
                ('description', models.TextField(blank=True)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('citizen', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='main_application.citizen')),
                ('uploaded_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'citizen_documents',
            },
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('code', models.CharField(max_length=20, unique=True)),
                ('description', models.TextField()),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('head_of_department', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='headed_departments', to=settings.AUTH_USER_MODEL)),
                ('parent_department', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='main_application.department')),
            ],
            options={
                'db_table': 'departments',
            },
        ),
        migrations.CreateModel(
            name='AssetTransfer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transfer_number', models.CharField(max_length=50, unique=True)),
                ('transfer_date', models.DateField()),
                ('reason', models.TextField()),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('completed', 'Completed'), ('rejected', 'Rejected')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_asset_transfers', to=settings.AUTH_USER_MODEL)),
                ('asset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transfers', to='main_application.asset')),
                ('from_custodian', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assets_transferred_from', to=settings.AUTH_USER_MODEL)),
                ('requested_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='requested_asset_transfers', to=settings.AUTH_USER_MODEL)),
                ('to_custodian', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assets_transferred_to', to=settings.AUTH_USER_MODEL)),
                ('from_department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='asset_transfers_from', to='main_application.department')),
                ('to_department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='asset_transfers_to', to='main_application.department')),
            ],
            options={
                'db_table': 'asset_transfers',
            },
        ),
        migrations.AddField(
            model_name='asset',
            name='department',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_application.department'),
        ),
        migrations.AddField(
            model_name='user',
            name='department',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='main_application.department'),
        ),
        migrations.CreateModel(
            name='DevelopmentApplication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('application_number', models.CharField(max_length=50, unique=True)),
                ('application_type', models.CharField(choices=[('building_plan', 'Building Plan Approval'), ('change_of_use', 'Change of Use'), ('subdivision', 'Subdivision'), ('amalgamation', 'Amalgamation'), ('extension', 'Extension')], max_length=50)),
                ('description', models.TextField()),
                ('proposed_use', models.CharField(max_length=200)),
                ('estimated_cost', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('floor_area', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('application_date', models.DateField()),
                ('status', models.CharField(choices=[('submitted', 'Submitted'), ('under_review', 'Under Review'), ('site_visit', 'Site Visit Scheduled'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('conditional', 'Conditionally Approved')], default='submitted', max_length=20)),
                ('approval_date', models.DateField(blank=True, null=True)),
                ('conditions', models.TextField(blank=True)),
                ('rejection_reason', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('applicant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='development_applications', to='main_application.citizen')),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_developments', to=settings.AUTH_USER_MODEL)),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_developments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'development_applications',
            },
        ),
        migrations.CreateModel(
            name='DevelopmentDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document_type', models.CharField(max_length=100)),
                ('file', models.FileField(upload_to='development/documents/')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('application', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='main_application.developmentapplication')),
                ('uploaded_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'development_documents',
            },
        ),
        migrations.CreateModel(
            name='DisciplinaryCase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('case_number', models.CharField(max_length=50, unique=True)),
                ('offense', models.TextField()),
                ('offense_date', models.DateField()),
                ('report_date', models.DateField()),
                ('investigation_findings', models.TextField(blank=True)),
                ('action_taken', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('reported', 'Reported'), ('under_investigation', 'Under Investigation'), ('hearing_scheduled', 'Hearing Scheduled'), ('resolved', 'Resolved'), ('closed', 'Closed')], default='reported', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='disciplinary_cases', to=settings.AUTH_USER_MODEL)),
                ('investigating_officer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='investigated_cases', to=settings.AUTH_USER_MODEL)),
                ('reported_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reported_cases', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'disciplinary_cases',
            },
        ),
        migrations.CreateModel(
            name='ElectronicDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document_number', models.CharField(max_length=50, unique=True)),
                ('title', models.CharField(max_length=500)),
                ('description', models.TextField(blank=True)),
                ('file', models.FileField(upload_to='electronic_records/')),
                ('file_size', models.BigIntegerField()),
                ('file_type', models.CharField(max_length=50)),
                ('document_date', models.DateField()),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('active', 'Active'), ('archived', 'Archived'), ('destroyed', 'Destroyed')], default='draft', max_length=20)),
                ('retention_until', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='main_application.documentcategory')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_application.department')),
            ],
            options={
                'db_table': 'electronic_documents',
            },
        ),
        migrations.CreateModel(
            name='DocumentAccess',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('access_type', models.CharField(max_length=20)),
                ('access_date', models.DateTimeField(auto_now_add=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='access_logs', to='main_application.electronicdocument')),
            ],
            options={
                'db_table': 'document_access',
            },
        ),
        migrations.CreateModel(
            name='Facility',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('code', models.CharField(max_length=50, unique=True)),
                ('facility_type', models.CharField(choices=[('market', 'Market'), ('stadium', 'Stadium'), ('toilet', 'Public Toilet'), ('housing', 'County Housing'), ('office', 'Office'), ('other', 'Other')], max_length=50)),
                ('location', django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ('physical_address', models.TextField()),
                ('description', models.TextField(blank=True)),
                ('capacity', models.IntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('managed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_application.facilitycategory')),
            ],
            options={
                'verbose_name_plural': 'facilities',
                'db_table': 'facilities',
            },
        ),
        migrations.CreateModel(
            name='BiometricDevice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('device_id', models.CharField(max_length=50, unique=True)),
                ('device_name', models.CharField(max_length=200)),
                ('location', models.CharField(max_length=200)),
                ('ip_address', models.GenericIPAddressField()),
                ('is_active', models.BooleanField(default=True)),
                ('facility', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='main_application.facility')),
            ],
            options={
                'db_table': 'biometric_devices',
            },
        ),
        migrations.CreateModel(
            name='FacilityUnit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unit_number', models.CharField(max_length=50)),
                ('unit_type', models.CharField(choices=[('stall', 'Market Stall'), ('shop', 'Shop'), ('kiosk', 'Kiosk'), ('house', 'Rental House'), ('toilet', 'Toilet Unit'), ('office', 'Office Space')], max_length=50)),
                ('description', models.TextField(blank=True)),
                ('size_sqm', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('rental_rate_daily', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('rental_rate_monthly', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('rental_rate_yearly', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('status', models.CharField(choices=[('vacant', 'Vacant'), ('occupied', 'Occupied'), ('reserved', 'Reserved'), ('maintenance', 'Under Maintenance'), ('closed', 'Closed')], default='vacant', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('current_tenant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rented_units', to='main_application.citizen')),
                ('facility', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='units', to='main_application.facility')),
            ],
            options={
                'db_table': 'facility_units',
                'unique_together': {('facility', 'unit_number')},
            },
        ),
        migrations.CreateModel(
            name='FacilityTenancy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tenancy_number', models.CharField(max_length=50, unique=True)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(blank=True, null=True)),
                ('rental_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('payment_frequency', models.CharField(max_length=20)),
                ('status', models.CharField(choices=[('active', 'Active'), ('expired', 'Expired'), ('terminated', 'Terminated'), ('transferred', 'Transferred')], default='active', max_length=20)),
                ('deposit_amount', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('deposit_paid', models.BooleanField(default=False)),
                ('notes', models.TextField(blank=True)),
                ('termination_reason', models.TextField(blank=True)),
                ('termination_date', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tenancies', to='main_application.citizen')),
                ('unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tenancies', to='main_application.facilityunit')),
            ],
            options={
                'verbose_name_plural': 'facility tenancies',
                'db_table': 'facility_tenancies',
            },
        ),
        migrations.CreateModel(
            name='Fine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fine_number', models.CharField(max_length=50, unique=True)),
                ('offense_description', models.TextField()),
                ('offense_date', models.DateField()),
                ('offense_location', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326)),
                ('fine_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('amount_paid', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('balance', models.DecimalField(decimal_places=2, max_digits=10)),
                ('due_date', models.DateField()),
                ('status', models.CharField(choices=[('issued', 'Issued'), ('paid', 'Paid'), ('partially_paid', 'Partially Paid'), ('waived', 'Waived'), ('cancelled', 'Cancelled')], default='issued', max_length=20)),
                ('issued_date', models.DateField()),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('issued_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='issued_fines', to=settings.AUTH_USER_MODEL)),
                ('offender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fines', to='main_application.citizen')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fines', to='main_application.finecategory')),
            ],
        ),
        migrations.CreateModel(
            name='FleetVehicle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fleet_number', models.CharField(max_length=50, unique=True)),
                ('registration_number', models.CharField(max_length=20, unique=True)),
                ('vehicle_type', models.CharField(choices=[('car', 'Car'), ('truck', 'Truck'), ('bus', 'Bus'), ('motorcycle', 'Motorcycle'), ('machinery', 'Machinery/Plant')], max_length=50)),
                ('make', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
                ('year', models.IntegerField()),
                ('fuel_type', models.CharField(max_length=50)),
                ('engine_capacity', models.CharField(blank=True, max_length=50)),
                ('purchase_date', models.DateField()),
                ('purchase_cost', models.DecimalField(decimal_places=2, max_digits=15)),
                ('insurance_expiry', models.DateField()),
                ('inspection_due', models.DateField()),
                ('current_mileage', models.IntegerField(default=0)),
                ('status', models.CharField(choices=[('active', 'Active'), ('maintenance', 'Under Maintenance'), ('inactive', 'Inactive'), ('disposed', 'Disposed')], default='active', max_length=20)),
                ('has_gps', models.BooleanField(default=False)),
                ('gps_device_id', models.CharField(blank=True, max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('current_driver', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_vehicles', to=settings.AUTH_USER_MODEL)),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fleet_vehicles', to='main_application.department')),
            ],
            options={
                'db_table': 'fleet_vehicles',
            },
        ),
        migrations.CreateModel(
            name='FuelCard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('card_number', models.CharField(max_length=50, unique=True)),
                ('daily_limit', models.DecimalField(decimal_places=2, max_digits=10)),
                ('monthly_limit', models.DecimalField(decimal_places=2, max_digits=10)),
                ('is_active', models.BooleanField(default=True)),
                ('issued_date', models.DateField()),
                ('expiry_date', models.DateField()),
                ('vehicle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fuel_cards', to='main_application.fleetvehicle')),
            ],
            options={
                'db_table': 'fuel_cards',
            },
        ),
        migrations.CreateModel(
            name='FuelTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_number', models.CharField(max_length=50, unique=True)),
                ('transaction_type', models.CharField(choices=[('fuel', 'Fuel'), ('oil', 'Oil'), ('lubricant', 'Lubricant')], max_length=20)),
                ('transaction_date', models.DateTimeField()),
                ('quantity_liters', models.DecimalField(decimal_places=2, max_digits=10)),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('total_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('mileage', models.IntegerField()),
                ('receipt_number', models.CharField(blank=True, max_length=100)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('driver', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('fuel_card', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='main_application.fuelcard')),
                ('fuel_station', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_application.fuelstation')),
                ('vehicle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fuel_transactions', to='main_application.fleetvehicle')),
            ],
            options={
                'db_table': 'fuel_transactions',
            },
        ),
        migrations.CreateModel(
            name='GoodsReceiptNote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grn_number', models.CharField(max_length=50, unique=True)),
                ('supplier', models.CharField(max_length=200)),
                ('delivery_note_number', models.CharField(blank=True, max_length=100)),
                ('lpo_number', models.CharField(blank=True, max_length=100)),
                ('receipt_date', models.DateField()),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('received', 'Received'), ('inspected', 'Inspected'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='draft', max_length=20)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('inspected_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='inspected_goods', to=settings.AUTH_USER_MODEL)),
                ('received_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='received_goods', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'goods_receipt_notes',
            },
        ),
        migrations.CreateModel(
            name='HospitalWard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('ward_type', models.CharField(max_length=100)),
                ('bed_capacity', models.IntegerField()),
                ('is_active', models.BooleanField(default=True)),
                ('facility', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hospital_wards', to='main_application.healthfacility')),
            ],
            options={
                'db_table': 'hospital_wards',
            },
        ),
        migrations.CreateModel(
            name='GoodsReceiptItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity_ordered', models.IntegerField()),
                ('quantity_received', models.IntegerField()),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('total_price', models.DecimalField(decimal_places=2, max_digits=15)),
                ('remarks', models.TextField(blank=True)),
                ('grn', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='main_application.goodsreceiptnote')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_application.inventoryitem')),
            ],
            options={
                'db_table': 'goods_receipt_items',
            },
        ),
        migrations.CreateModel(
            name='ItemCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('code', models.CharField(max_length=50, unique=True)),
                ('description', models.TextField()),
                ('is_active', models.BooleanField(default=True)),
                ('parent_category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='main_application.itemcategory')),
            ],
            options={
                'verbose_name_plural': 'item categories',
                'db_table': 'item_categories',
            },
        ),
        migrations.AddField(
            model_name='inventoryitem',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='main_application.itemcategory'),
        ),
        migrations.CreateModel(
            name='LeaveApplication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('application_number', models.CharField(max_length=50, unique=True)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('days_requested', models.IntegerField()),
                ('reason', models.TextField()),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('approval_date', models.DateField(blank=True, null=True)),
                ('rejection_reason', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_leaves', to=settings.AUTH_USER_MODEL)),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leave_applications', to=settings.AUTH_USER_MODEL)),
                ('leave_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_application.leavetype')),
            ],
            options={
                'db_table': 'leave_applications',
            },
        ),
        migrations.CreateModel(
            name='License',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('license_number', models.CharField(max_length=50, unique=True)),
                ('application_date', models.DateField()),
                ('approval_date', models.DateField(blank=True, null=True)),
                ('issue_date', models.DateField(blank=True, null=True)),
                ('expiry_date', models.DateField(blank=True, null=True)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('submitted', 'Submitted'), ('under_review', 'Under Review'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('issued', 'Issued'), ('active', 'Active'), ('expired', 'Expired'), ('suspended', 'Suspended'), ('revoked', 'Revoked')], default='draft', max_length=20)),
                ('is_provisional', models.BooleanField(default=False)),
                ('is_renewal', models.BooleanField(default=False)),
                ('notes', models.TextField(blank=True)),
                ('rejection_reason', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_licenses', to=settings.AUTH_USER_MODEL)),
                ('business', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='licenses', to='main_application.business')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('previous_license', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='renewals', to='main_application.license')),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_licenses', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'licenses',
            },
        ),
        migrations.CreateModel(
            name='LicenseDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document_name', models.CharField(max_length=200)),
                ('file', models.FileField(upload_to='licenses/documents/')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('license', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='main_application.license')),
                ('uploaded_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('requirement', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main_application.licenserequirement')),
            ],
            options={
                'db_table': 'license_documents',
            },
        ),
        migrations.CreateModel(
            name='LicenseType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('code', models.CharField(max_length=50, unique=True)),
                ('description', models.TextField()),
                ('validity_period_days', models.IntegerField()),
                ('is_renewable', models.BooleanField(default=True)),
                ('requires_inspection', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('business_category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='license_types', to='main_application.businesscategory')),
            ],
            options={
                'db_table': 'license_types',
            },
        ),
        migrations.AddField(
            model_name='licenserequirement',
            name='license_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requirements', to='main_application.licensetype'),
        ),
        migrations.AddField(
            model_name='license',
            name='license_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_application.licensetype'),
        ),
        migrations.CreateModel(
            name='MorgueRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('morgue_number', models.CharField(max_length=50, unique=True)),
                ('deceased_name', models.CharField(max_length=200)),
                ('age', models.IntegerField(blank=True, null=True)),
                ('gender', models.CharField(max_length=10)),
                ('date_of_death', models.DateField()),
                ('admission_date', models.DateTimeField()),
                ('release_date', models.DateTimeField(blank=True, null=True)),
                ('cause_of_death', models.TextField()),
                ('next_of_kin_name', models.CharField(max_length=200)),
                ('next_of_kin_phone', models.CharField(max_length=15)),
                ('next_of_kin_relationship', models.CharField(max_length=50)),
                ('compartment_number', models.CharField(max_length=20)),
                ('status', models.CharField(choices=[('admitted', 'Admitted'), ('released', 'Released'), ('buried', 'Buried')], default='admitted', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('admitted_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('facility', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='morgue_records', to='main_application.healthfacility')),
            ],
            options={
                'db_table': 'morgue_records',
            },
        ),
        migrations.CreateModel(
            name='OutdoorAdvertising',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reference_number', models.CharField(max_length=50, unique=True)),
                ('advertising_type', models.CharField(choices=[('billboard', 'Billboard'), ('signage', 'Signage'), ('branding', 'Branding')], max_length=20)),
                ('description', models.TextField()),
                ('width', models.DecimalField(decimal_places=2, max_digits=10)),
                ('height', models.DecimalField(decimal_places=2, max_digits=10)),
                ('size_sqm', models.DecimalField(decimal_places=2, max_digits=10)),
                ('location', django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ('landmark', models.CharField(max_length=200)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('status', models.CharField(choices=[('pending', 'Pending Approval'), ('approved', 'Approved'), ('active', 'Active'), ('expired', 'Expired'), ('removed', 'Removed')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_application.advertisingcategory')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='outdoor_advertising', to='main_application.citizen')),
            ],
            options={
                'db_table': 'outdoor_advertising',
            },
        ),
        migrations.CreateModel(
            name='OutdoorAdvertisingDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document_type', models.CharField(max_length=100)),
                ('file', models.FileField(upload_to='advertising/documents/')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('advertising', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='main_application.outdooradvertising')),
            ],
            options={
                'db_table': 'outdoor_advertising_documents',
            },
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('patient_number', models.CharField(max_length=50, unique=True)),
                ('first_name', models.CharField(max_length=100)),
                ('middle_name', models.CharField(blank=True, max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('date_of_birth', models.DateField()),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other')], max_length=1)),
                ('id_number', models.CharField(blank=True, max_length=20)),
                ('phone', models.CharField(max_length=15)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('address', models.TextField()),
                ('next_of_kin_name', models.CharField(max_length=200)),
                ('next_of_kin_phone', models.CharField(max_length=15)),
                ('next_of_kin_relationship', models.CharField(max_length=50)),
                ('blood_group', models.CharField(blank=True, max_length=10)),
                ('allergies', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('registered_at', models.DateTimeField(auto_now_add=True)),
                ('citizen', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='patient_profile', to='main_application.citizen')),
            ],
            options={
                'db_table': 'patients',
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('receipt_number', models.CharField(max_length=50, unique=True)),
                ('transaction_reference', models.CharField(max_length=100, unique=True)),
                ('payment_date', models.DateTimeField()),
                ('amount', models.DecimalField(decimal_places=2, max_digits=15)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('reversed', 'Reversed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('payer_name', models.CharField(max_length=200)),
                ('payer_phone', models.CharField(max_length=15)),
                ('payer_reference', models.CharField(blank=True, max_length=100)),
                ('provider_reference', models.CharField(blank=True, max_length=100)),
                ('provider_response', models.JSONField(blank=True, null=True)),
                ('notes', models.TextField(blank=True)),
                ('is_auto_receipted', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('bill', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='payments', to='main_application.bill')),
                ('citizen', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='main_application.citizen')),
                ('collected_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('payment_method', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_application.paymentmethod')),
            ],
            options={
                'db_table': 'payments',
            },
        ),
        migrations.CreateModel(
            name='FinePayment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount_paid', models.DecimalField(decimal_places=2, max_digits=10)),
                ('payment_date', models.DateField()),
                ('recorded_at', models.DateTimeField(auto_now_add=True)),
                ('fine', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='main_application.fine')),
                ('recorded_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('payment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_application.payment')),
            ],
            options={
                'db_table': 'fine_payments',
            },
        ),
        migrations.AddField(
            model_name='fine',
            name='payment',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='main_application.payment'),
        ),
        migrations.CreateModel(
            name='FacilityBooking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('booking_number', models.CharField(max_length=50, unique=True)),
                ('booking_date', models.DateField()),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
                ('purpose', models.TextField()),
                ('expected_attendance', models.IntegerField(default=0)),
                ('booking_fee', models.DecimalField(decimal_places=2, max_digits=10)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('confirmed', 'Confirmed'), ('cancelled', 'Cancelled'), ('completed', 'Completed')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_bookings', to=settings.AUTH_USER_MODEL)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='facility_bookings', to='main_application.citizen')),
                ('facility', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to='main_application.facility')),
                ('payment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='main_application.payment')),
            ],
            options={
                'db_table': 'facility_bookings',
            },
        ),
        migrations.CreateModel(
            name='PaymentReversal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('payment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='main_application.payment')),
            ],
        ),
        migrations.CreateModel(
            name='PerformanceReview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('review_number', models.CharField(max_length=50, unique=True)),
                ('review_period_start', models.DateField()),
                ('review_period_end', models.DateField()),
                ('objectives', models.TextField()),
                ('achievements', models.TextField(blank=True)),
                ('rating', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('supervisor_comments', models.TextField(blank=True)),
                ('employee_comments', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('submitted', 'Submitted'), ('reviewed', 'Reviewed'), ('approved', 'Approved')], default='draft', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_reviews', to=settings.AUTH_USER_MODEL)),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='performance_reviews', to=settings.AUTH_USER_MODEL)),
                ('reviewer', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='conducted_reviews', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'performance_reviews',
            },
        ),
        migrations.CreateModel(
            name='Property',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('parcel_number', models.CharField(max_length=50, unique=True)),
                ('original_parcel_number', models.CharField(blank=True, max_length=50)),
                ('area_sqm', models.DecimalField(decimal_places=2, max_digits=15)),
                ('assessed_value', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('location', django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ('boundary', django.contrib.gis.db.models.fields.PolygonField(blank=True, null=True, srid=4326)),
                ('street', models.CharField(blank=True, max_length=200)),
                ('plot_number', models.CharField(blank=True, max_length=50)),
                ('building_name', models.CharField(blank=True, max_length=200)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('disputed', 'Disputed'), ('subdivided', 'Subdivided'), ('amalgamated', 'Amalgamated')], default='active', max_length=20)),
                ('has_caveat', models.BooleanField(default=False)),
                ('annual_rate', models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                ('registration_date', models.DateField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('land_use_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_application.landusetype')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='properties', to='main_application.citizen')),
                ('property_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_application.propertytype')),
            ],
            options={
                'verbose_name_plural': 'properties',
                'db_table': 'properties',
            },
        ),
        migrations.AddField(
            model_name='developmentapplication',
            name='property',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='development_applications', to='main_application.property'),
        ),
        migrations.CreateModel(
            name='PropertyAmalgamation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amalgamation_date', models.DateField()),
                ('approval_number', models.CharField(max_length=100)),
                ('surveyor', models.CharField(max_length=200)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('new_property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='source_amalgamation', to='main_application.property')),
                ('parent_properties', models.ManyToManyField(related_name='amalgamations', to='main_application.property')),
            ],
            options={
                'db_table': 'property_amalgamations',
            },
        ),
        migrations.CreateModel(
            name='PropertyCaveat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('caveat_type', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('lodged_by', models.CharField(max_length=200)),
                ('lodged_date', models.DateField()),
                ('is_active', models.BooleanField(default=True)),
                ('removed_date', models.DateField(blank=True, null=True)),
                ('removal_reason', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='caveats', to='main_application.property')),
            ],
            options={
                'db_table': 'property_caveats',
            },
        ),
        migrations.CreateModel(
            name='PropertyDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document_type', models.CharField(max_length=100)),
                ('document_number', models.CharField(blank=True, max_length=100)),
                ('file', models.FileField(upload_to='properties/documents/')),
                ('description', models.TextField(blank=True)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='main_application.property')),
                ('uploaded_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'property_documents',
            },
        ),
        migrations.CreateModel(
            name='PropertyOwnershipHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transfer_date', models.DateField()),
                ('transfer_type', models.CharField(max_length=50)),
                ('transfer_value', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('deed_number', models.CharField(blank=True, max_length=100)),
                ('notes', models.TextField(blank=True)),
                ('recorded_at', models.DateTimeField(auto_now_add=True)),
                ('new_owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='acquired_properties', to='main_application.citizen')),
                ('previous_owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='previous_properties', to='main_application.citizen')),
                ('property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ownership_history', to='main_application.property')),
                ('recorded_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'property ownership histories',
                'db_table': 'property_ownership_history',
            },
        ),
        migrations.CreateModel(
            name='PropertySubdivision',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subdivision_date', models.DateField()),
                ('approval_number', models.CharField(max_length=100)),
                ('surveyor', models.CharField(max_length=200)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('child_properties', models.ManyToManyField(related_name='parent_subdivisions', to='main_application.property')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('parent_property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subdivisions', to='main_application.property')),
            ],
            options={
                'db_table': 'property_subdivisions',
            },
        ),
        migrations.CreateModel(
            name='PropertyValuation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('valuation_date', models.DateField()),
                ('valuation_method', models.CharField(max_length=100)),
                ('land_value', models.DecimalField(decimal_places=2, max_digits=15)),
                ('improvement_value', models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                ('total_value', models.DecimalField(decimal_places=2, max_digits=15)),
                ('valuer_name', models.CharField(max_length=200)),
                ('valuation_report', models.FileField(blank=True, null=True, upload_to='valuations/')),
                ('is_current', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='valuations', to='main_application.property')),
            ],
            options={
                'db_table': 'property_valuations',
            },
        ),
        migrations.CreateModel(
            name='RevenueStream',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('code', models.CharField(max_length=50, unique=True)),
                ('description', models.TextField()),
                ('is_recurring', models.BooleanField(default=False)),
                ('billing_frequency', models.CharField(blank=True, max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='revenue_streams', to='main_application.department')),
                ('parent_stream', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='main_application.revenuestream')),
            ],
            options={
                'db_table': 'revenue_streams',
            },
        ),
        migrations.CreateModel(
            name='PenaltyRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('grace_period_days', models.IntegerField(default=0)),
                ('penalty_type', models.CharField(max_length=20)),
                ('penalty_amount', models.DecimalField(decimal_places=2, max_digits=15)),
                ('max_penalty_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('effective_from', models.DateField()),
                ('effective_to', models.DateField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('revenue_stream', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='penalty_rules', to='main_application.revenuestream')),
            ],
            options={
                'db_table': 'penalty_rules',
            },
        ),
        migrations.AddField(
            model_name='payment',
            name='revenue_stream',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_application.revenuestream'),
        ),
        migrations.AddField(
            model_name='licensetype',
            name='revenue_stream',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_application.revenuestream'),
        ),
        migrations.AddField(
            model_name='finecategory',
            name='revenue_stream',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_application.revenuestream'),
        ),
        migrations.AddField(
            model_name='chargerate',
            name='revenue_stream',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='charge_rates', to='main_application.revenuestream'),
        ),
        migrations.AddField(
            model_name='bill',
            name='revenue_stream',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_application.revenuestream'),
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField()),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('parent_role', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main_application.role')),
                ('permissions', models.ManyToManyField(related_name='roles', to='main_application.permission')),
            ],
            options={
                'db_table': 'roles',
            },
        ),
        migrations.CreateModel(
            name='Sacco',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('registration_number', models.CharField(max_length=100, unique=True)),
                ('phone', models.CharField(max_length=15)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('physical_address', models.TextField()),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('citizen', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='saccos', to='main_application.citizen')),
            ],
            options={
                'db_table': 'saccos',
            },
        ),
        migrations.CreateModel(
            name='StaffDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document_type', models.CharField(max_length=100)),
                ('document_number', models.CharField(blank=True, max_length=100)),
                ('file', models.FileField(upload_to='staff/documents/')),
                ('description', models.TextField(blank=True)),
                ('expiry_date', models.DateField(blank=True, null=True)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to=settings.AUTH_USER_MODEL)),
                ('uploaded_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='uploaded_staff_docs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'staff_documents',
            },
        ),
        migrations.CreateModel(
            name='Store',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('code', models.CharField(max_length=50, unique=True)),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('store_keeper', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='managed_stores', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'stores',
            },
        ),
        migrations.AddField(
            model_name='goodsreceiptnote',
            name='store',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='receipts', to='main_application.store'),
        ),
        migrations.CreateModel(
            name='StoreRequisition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('requisition_number', models.CharField(max_length=50, unique=True)),
                ('requisition_date', models.DateField()),
                ('required_date', models.DateField()),
                ('purpose', models.TextField()),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('issued', 'Issued'), ('rejected', 'Rejected'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('issue_date', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_requisitions', to=settings.AUTH_USER_MODEL)),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_application.department')),
                ('issued_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='issued_items', to=settings.AUTH_USER_MODEL)),
                ('requested_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='store_requests', to=settings.AUTH_USER_MODEL)),
                ('store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requisitions', to='main_application.store')),
            ],
            options={
                'db_table': 'store_requisitions',
            },
        ),
        migrations.CreateModel(
            name='RequisitionItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity_requested', models.IntegerField()),
                ('quantity_approved', models.IntegerField(blank=True, null=True)),
                ('quantity_issued', models.IntegerField(blank=True, null=True)),
                ('remarks', models.TextField(blank=True)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_application.inventoryitem')),
                ('requisition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='main_application.storerequisition')),
            ],
            options={
                'db_table': 'requisition_items',
            },
        ),
        migrations.CreateModel(
            name='SubCounty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('code', models.CharField(max_length=20, unique=True)),
                ('headquarters', models.CharField(max_length=100)),
                ('boundary', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, null=True, srid=4326)),
                ('is_active', models.BooleanField(default=True)),
                ('county', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sub_counties', to='main_application.county')),
            ],
            options={
                'db_table': 'sub_counties',
                'unique_together': {('county', 'name')},
            },
        ),
        migrations.AddField(
            model_name='store',
            name='sub_county',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_application.subcounty'),
        ),
        migrations.AddField(
            model_name='property',
            name='sub_county',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_application.subcounty'),
        ),
        migrations.AddField(
            model_name='payment',
            name='sub_county',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main_application.subcounty'),
        ),
        migrations.CreateModel(
            name='ParkingZone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('code', models.CharField(max_length=50, unique=True)),
                ('zone_type', models.CharField(max_length=50)),
                ('boundary', django.contrib.gis.db.models.fields.PolygonField(blank=True, null=True, srid=4326)),
                ('capacity', models.IntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('sub_county', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_application.subcounty')),
            ],
            options={
                'db_table': 'parking_zones',
            },
        ),
        migrations.AddField(
            model_name='outdooradvertising',
            name='sub_county',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_application.subcounty'),
        ),
        migrations.AddField(
            model_name='healthfacility',
            name='sub_county',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_application.subcounty'),
        ),
        migrations.AddField(
            model_name='facility',
            name='sub_county',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_application.subcounty'),
        ),
        migrations.AddField(
            model_name='citizen',
            name='sub_county',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main_application.subcounty'),
        ),
        migrations.AddField(
            model_name='business',
            name='sub_county',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_application.subcounty'),
        ),
        migrations.AddField(
            model_name='bill',
            name='sub_county',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main_application.subcounty'),
        ),
        migrations.AddField(
            model_name='asset',
            name='sub_county',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_application.subcounty'),
        ),
        migrations.AddField(
            model_name='user',
            name='sub_county',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='main_application.subcounty'),
        ),
        migrations.CreateModel(
            name='SystemConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=100, unique=True)),
                ('value', models.TextField()),
                ('description', models.TextField()),
                ('data_type', models.CharField(max_length=20)),
                ('is_editable', models.BooleanField(default=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'system_configuration',
            },
        ),
        migrations.CreateModel(
            name='Transfer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transfer_number', models.CharField(max_length=50, unique=True)),
                ('reason', models.TextField()),
                ('effective_date', models.DateField()),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('completed', 'Completed')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_transfers', to=settings.AUTH_USER_MODEL)),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transfers', to=settings.AUTH_USER_MODEL)),
                ('from_department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transfers_from', to='main_application.department')),
                ('from_sub_county', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='transfers_from', to='main_application.subcounty')),
                ('requested_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='requested_transfers', to=settings.AUTH_USER_MODEL)),
                ('to_department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transfers_to', to='main_application.department')),
                ('to_sub_county', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='transfers_to', to='main_application.subcounty')),
            ],
            options={
                'db_table': 'transfers',
            },
        ),
        migrations.CreateModel(
            name='Triage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('visit_date', models.DateTimeField()),
                ('priority', models.CharField(choices=[('emergency', 'Emergency'), ('urgent', 'Urgent'), ('normal', 'Normal')], max_length=20)),
                ('temperature', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True)),
                ('blood_pressure', models.CharField(blank=True, max_length=20)),
                ('pulse_rate', models.IntegerField(blank=True, null=True)),
                ('weight', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('height', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('chief_complaint', models.TextField()),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('facility', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_application.healthfacility')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='triages', to='main_application.patient')),
                ('triaged_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'triages',
            },
        ),
        migrations.CreateModel(
            name='Vehicle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registration_number', models.CharField(max_length=20, unique=True)),
                ('make', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
                ('year', models.IntegerField()),
                ('color', models.CharField(max_length=50)),
                ('vehicle_type', models.CharField(max_length=50)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vehicles', to='main_application.citizen')),
                ('sacco', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='vehicles', to='main_application.sacco')),
            ],
            options={
                'db_table': 'vehicles',
            },
        ),
        migrations.CreateModel(
            name='ParkingPayment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment_type', models.CharField(choices=[('daily', 'Daily'), ('monthly', 'Monthly'), ('yearly', 'Yearly'), ('reserved', 'Reserved Parking')], max_length=20)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('parking_zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_application.parkingzone')),
                ('payment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_application.payment')),
                ('vehicle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parking_payments', to='main_application.vehicle')),
            ],
            options={
                'db_table': 'parking_payments',
            },
        ),
        migrations.CreateModel(
            name='ClampingRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('clamping_number', models.CharField(max_length=50, unique=True)),
                ('clamped_date', models.DateTimeField()),
                ('clamped_location', django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ('reason', models.TextField()),
                ('clamping_fee', models.DecimalField(decimal_places=2, max_digits=10)),
                ('towing_fee', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('storage_fee', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('total_fee', models.DecimalField(decimal_places=2, max_digits=10)),
                ('status', models.CharField(choices=[('clamped', 'Clamped'), ('towed', 'Towed'), ('released', 'Released')], default='clamped', max_length=20)),
                ('released_date', models.DateTimeField(blank=True, null=True)),
                ('clamped_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='clamping_actions', to=settings.AUTH_USER_MODEL)),
                ('released_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='release_actions', to=settings.AUTH_USER_MODEL)),
                ('parking_zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_application.parkingzone')),
                ('payment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='main_application.payment')),
                ('vehicle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='clamping_records', to='main_application.vehicle')),
            ],
            options={
                'db_table': 'clamping_records',
            },
        ),
        migrations.CreateModel(
            name='VehicleMaintenance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('maintenance_number', models.CharField(max_length=50, unique=True)),
                ('maintenance_type', models.CharField(choices=[('routine', 'Routine Service'), ('repair', 'Repair'), ('inspection', 'Inspection'), ('emergency', 'Emergency')], max_length=20)),
                ('description', models.TextField()),
                ('scheduled_date', models.DateField()),
                ('completed_date', models.DateField(blank=True, null=True)),
                ('service_provider', models.CharField(max_length=200)),
                ('cost', models.DecimalField(decimal_places=2, max_digits=10)),
                ('mileage', models.IntegerField()),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='scheduled', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('requested_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('vehicle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='maintenance_records', to='main_application.fleetvehicle')),
            ],
            options={
                'db_table': 'vehicle_maintenance',
            },
        ),
        migrations.CreateModel(
            name='VehicleTrip',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('trip_number', models.CharField(max_length=50, unique=True)),
                ('purpose', models.TextField()),
                ('destination', models.CharField(max_length=200)),
                ('scheduled_departure', models.DateTimeField()),
                ('scheduled_return', models.DateTimeField()),
                ('actual_departure', models.DateTimeField(blank=True, null=True)),
                ('actual_return', models.DateTimeField(blank=True, null=True)),
                ('start_mileage', models.IntegerField()),
                ('end_mileage', models.IntegerField(blank=True, null=True)),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='scheduled', max_length=20)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_trips', to=settings.AUTH_USER_MODEL)),
                ('driver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trips', to=settings.AUTH_USER_MODEL)),
                ('vehicle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trips', to='main_application.fleetvehicle')),
            ],
            options={
                'db_table': 'vehicle_trips',
            },
        ),
        migrations.CreateModel(
            name='Visit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('visit_number', models.CharField(max_length=50, unique=True)),
                ('visit_type', models.CharField(choices=[('outpatient', 'Outpatient'), ('inpatient', 'Inpatient'), ('emergency', 'Emergency')], max_length=20)),
                ('visit_date', models.DateTimeField()),
                ('diagnosis', models.TextField(blank=True)),
                ('treatment', models.TextField(blank=True)),
                ('notes', models.TextField(blank=True)),
                ('is_complete', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('attended_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('facility', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_application.healthfacility')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='visits', to='main_application.patient')),
                ('triage', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='main_application.triage')),
            ],
            options={
                'db_table': 'visits',
            },
        ),
        migrations.CreateModel(
            name='Prescription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prescription_number', models.CharField(max_length=50, unique=True)),
                ('medication_name', models.CharField(max_length=200)),
                ('dosage', models.CharField(max_length=100)),
                ('frequency', models.CharField(max_length=100)),
                ('duration', models.CharField(max_length=100)),
                ('quantity', models.IntegerField()),
                ('instructions', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('dispensed', 'Dispensed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('dispensed_date', models.DateTimeField(blank=True, null=True)),
                ('medication_cost', models.DecimalField(decimal_places=2, max_digits=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('dispensed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='dispensed_prescriptions', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prescriptions', to='main_application.patient')),
                ('prescribed_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='prescriptions', to=settings.AUTH_USER_MODEL)),
                ('visit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prescriptions', to='main_application.visit')),
            ],
            options={
                'db_table': 'prescriptions',
            },
        ),
        migrations.CreateModel(
            name='LabTest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('test_number', models.CharField(max_length=50, unique=True)),
                ('test_name', models.CharField(max_length=200)),
                ('test_category', models.CharField(max_length=100)),
                ('requested_date', models.DateTimeField()),
                ('completed_date', models.DateTimeField(blank=True, null=True)),
                ('results', models.TextField(blank=True)),
                ('remarks', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('test_cost', models.DecimalField(decimal_places=2, max_digits=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('processed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='processed_tests', to=settings.AUTH_USER_MODEL)),
                ('requested_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='requested_tests', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lab_tests', to='main_application.patient')),
                ('visit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lab_tests', to='main_application.visit')),
            ],
            options={
                'db_table': 'lab_tests',
            },
        ),
        migrations.CreateModel(
            name='Imaging',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('imaging_number', models.CharField(max_length=50, unique=True)),
                ('imaging_type', models.CharField(max_length=100)),
                ('body_part', models.CharField(max_length=100)),
                ('requested_date', models.DateTimeField()),
                ('completed_date', models.DateTimeField(blank=True, null=True)),
                ('findings', models.TextField(blank=True)),
                ('report', models.TextField(blank=True)),
                ('images', models.FileField(blank=True, null=True, upload_to='imaging/')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('imaging_cost', models.DecimalField(decimal_places=2, max_digits=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('processed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='processed_imaging', to=settings.AUTH_USER_MODEL)),
                ('requested_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='requested_imaging', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='imaging_tests', to='main_application.patient')),
                ('visit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='imaging_tests', to='main_application.visit')),
            ],
            options={
                'db_table': 'imaging',
            },
        ),
        migrations.CreateModel(
            name='Admission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('admission_number', models.CharField(max_length=50, unique=True)),
                ('bed_number', models.CharField(max_length=20)),
                ('admission_date', models.DateTimeField()),
                ('discharge_date', models.DateTimeField(blank=True, null=True)),
                ('admission_reason', models.TextField()),
                ('discharge_notes', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('admitted', 'Admitted'), ('discharged', 'Discharged'), ('transferred', 'Transferred'), ('deceased', 'Deceased')], default='admitted', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('admitted_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='patient_admissions', to=settings.AUTH_USER_MODEL)),
                ('discharged_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='patient_discharges', to=settings.AUTH_USER_MODEL)),
                ('ward', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='admissions', to='main_application.hospitalward')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='admissions', to='main_application.patient')),
                ('visit', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='admission', to='main_application.visit')),
            ],
            options={
                'db_table': 'admissions',
            },
        ),
        migrations.CreateModel(
            name='Ward',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('code', models.CharField(max_length=20, unique=True)),
                ('boundary', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, null=True, srid=4326)),
                ('population', models.IntegerField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('sub_county', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wards', to='main_application.subcounty')),
            ],
            options={
                'db_table': 'wards',
                'unique_together': {('sub_county', 'name')},
            },
        ),
        migrations.AddField(
            model_name='property',
            name='ward',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_application.ward'),
        ),
        migrations.AddField(
            model_name='payment',
            name='ward',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main_application.ward'),
        ),
        migrations.AddField(
            model_name='parkingzone',
            name='ward',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_application.ward'),
        ),
        migrations.AddField(
            model_name='outdooradvertising',
            name='ward',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_application.ward'),
        ),
        migrations.AddField(
            model_name='healthfacility',
            name='ward',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_application.ward'),
        ),
        migrations.AddField(
            model_name='facility',
            name='ward',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_application.ward'),
        ),
        migrations.AddField(
            model_name='citizen',
            name='ward',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main_application.ward'),
        ),
        migrations.AddField(
            model_name='business',
            name='ward',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_application.ward'),
        ),
        migrations.AddField(
            model_name='bill',
            name='ward',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main_application.ward'),
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('create', 'Create'), ('update', 'Update'), ('delete', 'Delete'), ('view', 'View'), ('approve', 'Approve'), ('reject', 'Reject'), ('reverse', 'Reverse')], max_length=20)),
                ('model_name', models.CharField(max_length=100)),
                ('object_id', models.CharField(max_length=50)),
                ('object_repr', models.CharField(max_length=200)),
                ('changes', models.JSONField(blank=True, null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'audit_logs',
                'indexes': [models.Index(fields=['user', 'timestamp'], name='audit_logs_user_id_88267f_idx'), models.Index(fields=['model_name', 'object_id'], name='audit_logs_model_n_656046_idx')],
            },
        ),
        migrations.CreateModel(
            name='Attendance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attendance_date', models.DateField()),
                ('attendance_time', models.DateTimeField()),
                ('attendance_type', models.CharField(choices=[('check_in', 'Check In'), ('check_out', 'Check Out')], max_length=20)),
                ('biometric_verified', models.BooleanField(default=False)),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attendance_records', to=settings.AUTH_USER_MODEL)),
                ('device', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main_application.biometricdevice')),
            ],
            options={
                'db_table': 'attendance',
                'indexes': [models.Index(fields=['employee', 'attendance_date'], name='attendance_employe_955cb5_idx')],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.CharField(choices=[('sms', 'SMS'), ('email', 'Email'), ('system', 'System')], max_length=20)),
                ('subject', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('sent', 'Sent'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('related_model', models.CharField(blank=True, max_length=100)),
                ('related_object_id', models.CharField(blank=True, max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'notifications',
                'indexes': [models.Index(fields=['recipient', 'read_at'], name='notificatio_recipie_8dcb32_idx')],
            },
        ),
        migrations.CreateModel(
            name='StoreStock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField(default=0)),
                ('reserved_quantity', models.IntegerField(default=0)),
                ('available_quantity', models.IntegerField(default=0)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stock_levels', to='main_application.inventoryitem')),
                ('store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stock', to='main_application.store')),
            ],
            options={
                'db_table': 'store_stock',
                'unique_together': {('store', 'item')},
            },
        ),
        migrations.CreateModel(
            name='TrainingParticipant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nomination_date', models.DateField()),
                ('status', models.CharField(choices=[('nominated', 'Nominated'), ('confirmed', 'Confirmed'), ('completed', 'Completed'), ('withdrawn', 'Withdrawn')], default='nominated', max_length=20)),
                ('attendance_percentage', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('certificate_issued', models.BooleanField(default=False)),
                ('certificate_number', models.CharField(blank=True, max_length=100)),
                ('feedback', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='training_programs', to=settings.AUTH_USER_MODEL)),
                ('nominated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='nominated_trainees', to=settings.AUTH_USER_MODEL)),
                ('program', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='main_application.trainingprogram')),
            ],
            options={
                'db_table': 'training_participants',
                'unique_together': {('program', 'employee')},
            },
        ),
        migrations.CreateModel(
            name='UserRole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assigned_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('assigned_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='role_assignments', to=settings.AUTH_USER_MODEL)),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main_application.role')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_roles',
                'unique_together': {('user', 'role')},
            },
        ),
        migrations.CreateModel(
            name='RevenueBudget',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('financial_year', models.CharField(max_length=20)),
                ('period_type', models.CharField(max_length=20)),
                ('period_start', models.DateField()),
                ('period_end', models.DateField()),
                ('target_amount', models.DecimalField(decimal_places=2, max_digits=15)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('revenue_stream', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='budgets', to='main_application.revenuestream')),
                ('sub_county', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main_application.subcounty')),
                ('ward', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main_application.ward')),
            ],
            options={
                'db_table': 'revenue_budgets',
                'unique_together': {('revenue_stream', 'financial_year', 'period_start', 'sub_county', 'ward')},
            },
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['receipt_number'], name='payments_receipt_6cb761_idx'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['transaction_reference'], name='payments_transac_4c44f7_idx'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['payment_date'], name='payments_payment_aebcb7_idx'),
        ),
        migrations.AddIndex(
            model_name='citizen',
            index=models.Index(fields=['unique_identifier'], name='citizens_unique__290307_idx'),
        ),
        migrations.AddIndex(
            model_name='citizen',
            index=models.Index(fields=['email'], name='citizens_email_765c52_idx'),
        ),
        migrations.AddIndex(
            model_name='citizen',
            index=models.Index(fields=['phone_primary'], name='citizens_phone_p_f161cc_idx'),
        ),
        migrations.AddIndex(
            model_name='bill',
            index=models.Index(fields=['bill_number'], name='bills_bill_nu_ba9272_idx'),
        ),
        migrations.AddIndex(
            model_name='bill',
            index=models.Index(fields=['citizen', 'status'], name='bills_citizen_9114c2_idx'),
        ),
        migrations.AddIndex(
            model_name='bill',
            index=models.Index(fields=['due_date'], name='bills_due_dat_7854b3_idx'),
        ),
    ]
